/**
 * Phase 6: Export Utilities
 * Functions for building Markdown and downloading files
 */

interface VersionData {
  name: string
  audience: string
  problem: string
  why_current_fails: string
  promise: string
  must_haves: string[]
  not_now: string[]
  constraints: string
  version_number?: number
  created_at?: string
}

/**
 * Build a formatted Markdown document from version data
 */
export function buildMarkdown(versionData: VersionData): string {
  const timestamp = versionData.created_at 
    ? new Date(versionData.created_at).toLocaleString()
    : new Date().toLocaleString()
  
  const markdown = `# ${versionData.name}
**Insight Brief Export**  
Version: ${versionData.version_number || 1}  
Generated: ${timestamp}

---

## 📋 Problem Summary

**What problem are we solving?**  
${versionData.problem}

**Why do current solutions fail?**  
${versionData.why_current_fails}

---

## 🎯 Target Persona

**Who is this for?**  
${versionData.audience}

---

## 💡 Our Promise

**Our positioning:**  
${versionData.promise}

---

## ✨ Pain Points

Based on the problem analysis, key pain points include:
- Loses time doing ${versionData.problem.toLowerCase()} manually
- Struggles with ${versionData.why_current_fails.toLowerCase()}
- Can't focus on growth because of operational overhead

---

## 🚀 MVP Features (What We're Building First)

${versionData.must_haves.map((item, index) => `${index + 1}. ${item}`).join('\n')}

---

## 📦 Out of Scope (Not Now)

${versionData.not_now.map((item, index) => `${index + 1}. ${item}`).join('\n')}

---

## 🔒 Constraints

${versionData.constraints}

---

## 🗺️ Positioning Line

We help ${versionData.audience} solve ${versionData.problem.toLowerCase()} without ${versionData.why_current_fails.toLowerCase()}, by ${versionData.promise.toLowerCase()}.

---

## 🎨 Mind Map Snapshot Included

A visual representation of this project can be generated in the Mind Map view.

---

*This brief was generated by Shepherd Insight — from idea to clarity in minutes.*
`

  return markdown
}

/**
 * Trigger a client-side file download
 */
export function downloadFile({ 
  filename, 
  content, 
  mimeType 
}: { 
  filename: string
  content: string
  mimeType: string
}): void {
  // Create a Blob from the content
  const blob = new Blob([content], { type: mimeType })
  
  // Create a temporary URL for the blob
  const url = URL.createObjectURL(blob)
  
  // Create a temporary anchor element and trigger download
  const link = document.createElement('a')
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  
  // Cleanup
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}

// Legacy exports kept for compatibility
export const exportToJSON = (data: any, filename: string) => {
  const content = JSON.stringify(data, null, 2)
  downloadFile({ filename, content, mimeType: 'application/json' })
}

export const exportToCSV = (data: any, filename: string) => {
  console.log('CSV export not yet implemented:', { data, filename })
}

export const exportToPDF = (data: any, filename: string) => {
  console.log('PDF export not yet implemented:', { data, filename })
}
